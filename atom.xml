<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://qinyu312.github.io</id>
    <title>҉҉҈淸鷠҉҉҈、</title>
    <updated>2021-01-28T01:59:33.986Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://qinyu312.github.io"/>
    <link rel="self" href="https://qinyu312.github.io/atom.xml"/>
    <subtitle>万般皆苦，唯有自渡</subtitle>
    <logo>https://qinyu312.github.io/images/avatar.png</logo>
    <icon>https://qinyu312.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, ҉҉҈淸鷠҉҉҈、</rights>
    <entry>
        <title type="html"><![CDATA[微信小程序本地接口调用]]></title>
        <id>https://qinyu312.github.io/post/wei-xin-xiao-cheng-xu-ben-di-ce-shi-jie-kou/</id>
        <link href="https://qinyu312.github.io/post/wei-xin-xiao-cheng-xu-ben-di-ce-shi-jie-kou/">
        </link>
        <updated>2021-01-28T01:41:32.000Z</updated>
        <content type="html"><![CDATA[<p>以Mac环境为例，需要下载安装 Tomcat 来运行一个war包</p>
<ol>
<li>将后端项目代码中已经配置好的 xxx.war 文件拷贝至 tomcat文件目录下的 webapps下<br>
<img src="https://qinyu312.github.io/post-images/1611799120504.png" alt="" loading="lazy"></li>
<li>命令行进入到 Tomcat 下的 bin 目录</li>
<li></li>
</ol>
<p>命令行启动 startup.sh<br>
<img src="https://qinyu312.github.io/post-images/1611799131274.png" alt="" loading="lazy"><br>
<code>sudo sh ./startup.sh</code><br>
命令行结束运行<br>
<img src="https://qinyu312.github.io/post-images/1611799138646.png" alt="" loading="lazy"><br>
<code>sudo sh ./shutdown.sh</code><br>
命令行查看 Tomcat所有进程<br>
<img src="https://qinyu312.github.io/post-images/1611799147086.png" alt="" loading="lazy"><br>
<code>ps -ef|grep java</code><br>
命令行强制终止 某些 Tomcat进程<br>
<code>kill -9 端口号</code></p>
<ol start="4">
<li>startup.sh 启动后就可以在浏览器输入 localhost:8080测试 Tomcat 启动的情况</li>
<li>把接口调用处的测试地址换成 localhost:8080 调用接口测试，数据正常返回，本地调用成功</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[微信小程序开发]]></title>
        <id>https://qinyu312.github.io/post/wei-xin-xiao-cheng-xu-kai-fa/</id>
        <link href="https://qinyu312.github.io/post/wei-xin-xiao-cheng-xu-kai-fa/">
        </link>
        <updated>2021-01-22T07:53:22.000Z</updated>
        <content type="html"><![CDATA[<h2 id="button-无法设置宽高">button 无法设置宽高</h2>
<p>当前版本的微信小程序，在.wxss文件里设置Button宽度无效,调整不会被应用到元素上</p>
<pre><code>.btn {
    width: 80%;
    height: 80rpx;
}
</code></pre>
<p>第一种方式是把 app.json里的  style: v2语句删掉。<br>
这样虽然也可以解决问题，但会导致全局的样式变化。<br>
第二种方式可以很便捷的解决问题，就是直接在 button标签的行内添加样式</p>
<pre><code>&lt;button style=&quot;width: 80%; height: 80rpx&quot;&gt;提交&lt;/button&gt;
</code></pre>
<p>按钮宽高生效</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[主流机型分辨率]]></title>
        <id>https://qinyu312.github.io/post/zhu-liu-ji-xing-fen-bian-lu/</id>
        <link href="https://qinyu312.github.io/post/zhu-liu-ji-xing-fen-bian-lu/">
        </link>
        <updated>2020-12-31T01:52:52.000Z</updated>
        <content type="html"><![CDATA[<p>iphone主流机型<br>
<img src="https://qinyu312.github.io/post-images/1609379604225.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[奇形怪状bug收集]]></title>
        <id>https://qinyu312.github.io/post/qi-xing-guai-zhuang-bug-shou-ji/</id>
        <link href="https://qinyu312.github.io/post/qi-xing-guai-zhuang-bug-shou-ji/">
        </link>
        <updated>2020-12-26T09:27:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="pageslider无法触发默认事件解决">pageSlider无法触发默认事件解决</h2>
<p>最近在做原生内嵌的H5年报页面，需求是上下滚动翻页，于是用上了 pageSlider.js插件进行实现，写到最后一个页面，有一个收集反馈意见的文本框，这边使用到 <textarea>标签，但是开发完后发现，输入框并不能聚焦和输入，通过对比得出结论，是因为引用pageSlider的缘故，最后在 pageSlider.js文件的源码中，将移动鼠标后的默认事件清除给注释掉，问题得到解决<br>
<img src="https://qinyu312.github.io/post-images/1609211243421.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[各种CSS积累]]></title>
        <id>https://qinyu312.github.io/post/ge-chong-css-ji-lei/</id>
        <link href="https://qinyu312.github.io/post/ge-chong-css-ji-lei/">
        </link>
        <updated>2020-12-21T08:44:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="隐藏textarea-input等输入框边框和选中出现边框">隐藏textarea input等输入框边框和选中出现边框</h2>
<pre><code>textarea {
    border: solid 0px;
	outline:none;
}
</code></pre>
<h2 id="textarea-输入时光标直接定位到后面且不会展示placeholder文本">textarea 输入时光标直接定位到后面，且不会展示placeholder文本</h2>
<p>这种情况是默认有空格在输入框中，解决方案比较奇葩，需要将<textarea>标签写在同一行即可解决问题</p>
<pre><code>&lt;!-- 错误写法 --&gt;
&lt;textarea placeholder=&quot;请输入文本&quot;&gt;
&lt;/textarea&gt;
&lt;!-- 正确写法 --&gt;
&lt;textarea placeholder=&quot;请输入文本&quot;&gt;&lt;/textarea&gt;
</code></pre>
<h2 id="图片或者页面-bulingbuling闪动效果">图片或者页面 bulingbuling闪动效果</h2>
<pre><code>.flicker {
	    /*width: 300px;  */                                  /* 宽度 */
	    /*height: 300px; */                                   /* 高度 */
	    /*border:#666 1px solid;*/
	    /*border-radius:50%;*/
	    opacity: 0.1;                                   /* 不透明度 */
	    overflow: hidden;                               /* 溢出隐藏 */
	   /* margin: 25% auto; */                              /* 外边距 */
	  
	    /* IE10、Firefox and Opera，IE9以及更早的版本不支持 */
	    animation-name: breath;                         /* 动画名称 */
	    animation-duration: 700ms;                         /* 动画时长3秒 */
	    animation-timing-function: ease-in-out;         /* 动画速度曲线：以低速开始和结束 */
	    animation-iteration-count: infinite;            /* 播放次数：无限 */
	 
	    /* Safari and Chrome */
	    -webkit-animation-name: breath;                 /* 动画名称 */
	    -webkit-animation-duration: 3000ms;                 /* 动画时长3秒 */
	    -webkit-animation-timing-function: ease-in-out; /* 动画速度曲线：以低速开始和结束 */
	    -webkit-animation-iteration-count: infinite;    /* 播放次数：无限 */
	}
	 
	@keyframes breath {
	    from { opacity: 0.1; }                          /* 动画开始时的不透明度 */
	    50%  { opacity:   1; }                          /* 动画50% 时的不透明度 */
	    to   { opacity: 0.1; }                          /* 动画结束时的不透明度 */    
	}
	 
	@-webkit-keyframes breath {
	    from { opacity: 0.1; }                          /* 动画开始时的不透明度 */
	    50%  { opacity:   1; }                          /* 动画50% 时的不透明度 */
	    to   { opacity: 0.1; }                          /* 动画结束时的不透明度 */
	}
</code></pre>
<h2 id="去除textarea右下角角标">去除textarea右下角角标</h2>
<pre><code>textarea {
	resize : none;
} 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JS各种零碎知识合集]]></title>
        <id>https://qinyu312.github.io/post/js-ge-chong-ling-sui-zhi-shi-he-ji/</id>
        <link href="https://qinyu312.github.io/post/js-ge-chong-ling-sui-zhi-shi-he-ji/">
        </link>
        <updated>2020-12-09T02:37:30.000Z</updated>
        <content type="html"><![CDATA[<h2 id="react里的事件">React里的事件</h2>
<pre><code>&lt;!-- onChange事件 --&gt;
this.handleChange = this.handleChange.bind(this)
handleChange(event) {
    this.setState({value: event.target.value})
}
&lt;textarea onChange={ this.handleChange } /&gt;  

&lt;!-- onSubmit事件 --&gt;
this.handleSubmit = this,handleSubmit(this)
handleSubmit(event) {
    alert('提交' + this.state.value + '成功!')
    event.preventDefault()    
    &lt;!-- 清除默认事件 --&gt;
}
&lt;form onSubmit= { this.handleSubmit }&gt;&lt;/form&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fetch querystring  跨域解决 封装请求]]></title>
        <id>https://qinyu312.github.io/post/fetch-shu-ju-jie-kou-qing-qiu/</id>
        <link href="https://qinyu312.github.io/post/fetch-shu-ju-jie-kou-qing-qiu/">
        </link>
        <updated>2020-12-08T14:38:43.000Z</updated>
        <content type="html"><![CDATA[<p>以前写数据接口，对接请求都是使用的Ajax，或者Axios之类的，最近在使用React进行开发，用到了<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch">fetch</a>, 和<a href="http://nodejs.cn/api/querystring.html">querystring</a></p>
<pre><code>import qs from 'querystring'
&lt;!-- get请求 --&gt;
fetch(&quot;http://iwenwiki.com/api/blueberrypai/getChengpinInfo.php&quot;)
.then(res =&gt; res.json())
.then(data =&gt; {
    console.log(data)
})

&lt;!-- post请求 --&gt;
fetch(&quot;http://iwenwiki.com/api/blueberrypai/login.php&quot;, {
    method: 'POST' ,   // 请求方式
    headers: {            // 请求头
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json, text/plain, */*',
    },
    &lt;!-- body: &quot;user_id=iwen@qq.com&amp;password=iwen123&amp;verification_code=crfvw&quot; --&gt;
    &lt;!-- 此处传参使用字符串传参的方式，所以需要参数间 &amp; 分隔拼串 --&gt;
    &lt;!-- 如果不想写拼串，也可以直接引入 querystring来进行转换操作如下 --&gt;
    body: qs.stringify({
        'user_id': 'iwen@qq.com',
        'password': 'iwen123',
        'verification_code': 'crfvw'
    })
})
</code></pre>
<h2 id="跨域的解决方案">跨域的解决方案</h2>
<p>跨域一般分为两种场景： 开发环境下的跨域问题和生产环境下的跨域问题<br>
此处以React项目开发环境下为例</p>
<pre><code>componentDidMount() {
    fetch(&quot;http://tingapi.ting.baidu.com/v1/restserver/ting?method=baidu.ting.billboard.billList&amp;type=1&amp;size=10&amp;offset=0&quot;)
    .then(res =&gt; res.json())
    .then(data =&gt; {
        console.log(data)
    })
    .catch(error =&gt; {
        console.log(new Error(error))
    })
}
</code></pre>
<p><img src="https://qinyu312.github.io/post-images/1607442245412.png" alt="" loading="lazy"><br>
此处请求会跨域<br>
需要在 package.json 文件中配置 proxy 代理解决<br>
<img src="https://qinyu312.github.io/post-images/1607442296763.png" alt="" loading="lazy"><br>
配置完成 package.json 文件后需要将请求接口前面的已经被代理的地址去掉如下</p>
<pre><code>componentDidMount() {
    fetch(&quot;/v1/restserver/ting?method=baidu.ting.billboard.billList&amp;type=1&amp;size=10&amp;offset=0&quot;)
    .then(res =&gt; res.json())
    .then(data =&gt; {
        console.log(data)
    })
    .catch(error =&gt; {
        console.log(new Error(error))
    })
}
</code></pre>
<p>然后终止此项目进程，重新运行该项目即可使用代理解决跨域问题。打开浏览器调试，接口数据正常请求得到。<br>
<img src="https://qinyu312.github.io/post-images/1607442458895.png" alt="" loading="lazy"></p>
<h2 id="fetch-封装常用请求">fetch 封装常用请求</h2>
<p>工具类文件utils下创建 http.js 用于封装常用的请求方法</p>
<pre><code>import qs from 'querystring'

&lt;!-- 导出封装的 get 请求 --&gt;
export function httpGet(url) {
    const result = fetch(url)
    return result
}

&lt;!-- 导出封装的 post 请求 --&gt;
export function httpPost(url, params) {
    &lt;!-- params为post请求携带参数 --&gt;
    const result = fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept': 'application/json, text/plain, */*',
        },
        body: qs.stringify(params)
    })
}
</code></pre>
<p>然后在 utils 同级创建一个 api 文件，用于管理接口，api 下新建一个 base.js ，用于向外暴露接口的前置接口地址公共部分(一般情况下接口地址的前半部分是一致的)，然后新建一个 index.js 用于定义业务接口请求统一管理，或者创建不同的功能分类 (如，登录的接口单独写在一个文件里，首页的接口单独写在一个文件里，便于维护)<br>
base.js</p>
<pre><code>const base = {
    baseUrl: 'http://iwenwiki.com/api'
}
</code></pre>
<p>index.js</p>
<pre><code>import {httpGet, httpPost} from '../utils/http'
import base from './base'

&lt;!-- 在下面定义各种业务接口 --&gt;
const api = {
    &lt;!-- get请求 --&gt;
    getUserId() {
        return httpGet(base.baseUrl + '/blueberrypai/getChengpinInfo.php');
    },
    &lt;!-- post请求 --&gt;
    getLogin(params) {
        return httpPost(baseUrl + '/blueberrypai/login.php', params);
    }
}

&lt;!-- 定义完成后导出 api ,在需要调用处导入调用即可 --&gt;
export default api
</code></pre>
<p>调用接口的文件下</p>
<pre><code>import api from '../api'
&lt;!-- get请求不用携带参数，直接获取并打印数据 --&gt;
api.getUserId().then(res =&gt; res.json()).then(data =&gt; {
    console.log(data)
})
&lt;!-- post请求调用接口时传入参数，获取并打印数据 --&gt;
api.getLogin({
    'user_id': 'iwen@qq.com',
    'password': 'iwen123',
    'verification_code': 'crfvw'
}).then(res =&gt; res.json()).then(data =&gt; {
    console.log(data)
})
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于各种浏览器兼容(持续更新中)]]></title>
        <id>https://qinyu312.github.io/post/guan-yu-ge-chong-ie-jian-rong/</id>
        <link href="https://qinyu312.github.io/post/guan-yu-ge-chong-ie-jian-rong/">
        </link>
        <updated>2020-12-04T10:07:51.000Z</updated>
        <content type="html"><![CDATA[<h2 id="ie条件注释">IE条件注释</h2>
<p>IE10以下版本可用，IE11已经取消支持</p>
<pre><code>&lt;!--[if lte IE 8]&gt; 	
        &lt;script src=&quot;/js/html5.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;/js/css3-mediaqueries.js&quot;&gt;&lt;/script&gt;
        &lt;link href=&quot;/css/ie8.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;
&lt;![endif]--&gt;
</code></pre>
<p>因为IE11不支持条件注释，可以使用正则判断</p>
<pre><code>var browser = navigator.appName;
var ie11 = !!navigator.userAgent.match(/Trident\/7\./);
if (browser == 'Microsoft Internet Explorer' || ie11 == true) {
    //do something
}
</code></pre>
<h2 id="ie9部分页面不显示的问题">IE9部分页面不显示的问题</h2>
<pre><code>IE9是不支持 console.log 打印输出语句的，在非开发者模式下会阻塞不会执行后面的内容
</code></pre>
<h2 id="ie9-及以下-ie浏览器不支持placeholder属性">IE9 及以下 IE浏览器不支持placeholder属性</h2>
<pre><code>引入 jquery和用于解决这个属性兼容的CDN
&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.ijquery.cn/js/jquery-1.7.2.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.ijquery.cn/js/jquery.placeholder.min.js&quot;&gt;&lt;/script&gt;

&lt;%--兼容IE9及以下input输入框，textarea文本框不支持提示文本placeholder属性的问题--%&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    $(function(){ $('input, textarea').placeholder(); });
&lt;/script&gt;
</code></pre>
<p>上面这种方法在HTML文件中亲测有效，但是不知道为什么在前后端不分离JSP项目中不会生效，以某国企老项目为例，需要在每个页面的JS代码中加上</p>
<pre><code>	&lt;!-- css代码 --&gt;
    .phcolor{ 
			color:#999;
	}

    &lt;!-- js代码 --&gt;
	// placeholder兼容IE9
	$(function(){
	  //判断浏览器是否支持placeholder属性
	  supportPlaceholder='placeholder'in document.createElement('input'),
	  placeholder=function(input){
	    var text = input.attr('placeholder'),
	    defaultValue = input.defaultValue;
	    if(!defaultValue){
	      input.val(text).addClass(&quot;phcolor&quot;);
	    }
	    input.focus(function(){
	      if(input.val() == text){
	        $(this).val(&quot;&quot;);
	      }
	    });
	    input.blur(function(){
	      if(input.val() == &quot;&quot;){
	        $(this).val(text).addClass(&quot;phcolor&quot;);
	      }
	    });
	    //输入的字符不为灰色
	    input.keydown(function(){
	      $(this).removeClass(&quot;phcolor&quot;);
	    });
	  };
	  //当浏览器不支持placeholder属性时，调用placeholder函数
	  if(!supportPlaceholder){
	    $('input').each(function(){
	      text = $(this).attr(&quot;placeholder&quot;);
	      if($(this).attr(&quot;type&quot;) == &quot;text&quot;){
	        placeholder($(this));
	      }
	    });
	  }
	});
</code></pre>
<h2 id="换行word-wrap与word-break兼容ie和火狐-chrome">换行word-wrap与word-break兼容ie和火狐、chrome</h2>
<ol>
<li>word-wrap控制换行，使用break-word时，会强制进行换行，中文没问题，英文语句没问题，长串的英文不会生效。</li>
<li>word-break控制是否断词<br>
normal是默认情况，英文单词不被拆开<br>
break-all，是断开单词。在单词到边界时，下个字母自动到下一行。主要解决了长串英文的问题。<br>
keep-all，是指Chinese, Japanese, and Korean不断词。即只用此时，不用word-wrap，中文就不会换行了。（英文语句正常。）<br>
所以，要做到英文和中文等强制换行，需要组合使用如下</li>
</ol>
<pre><code>&lt;p style=&quot;word-wrap: break-word; word-break: break-all&quot;&gt;&lt;/p&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Angular项目避坑指南]]></title>
        <id>https://qinyu312.github.io/post/angular-xiang-mu-bi-keng-zhi-nan/</id>
        <link href="https://qinyu312.github.io/post/angular-xiang-mu-bi-keng-zhi-nan/">
        </link>
        <updated>2020-11-24T10:15:01.000Z</updated>
        <content type="html"><![CDATA[<p>最近收到一个新的需求，有一个Angular项目需要兼容到 IE8 以上版本，实在让我又惊又喜，惊的是都 2020年了，还甩不掉 IE8 这颗烫手山芋；喜的是第一次接触 Angular项目，不知道又会学到什么新的知识呢。拉到项目代码后，本地启动，果然给我来了迎头痛击。<br>
首先确认本地安装有Node.js环境后，全局安装 Angular-cli ，也就是Angular脚手架,命令行输入：</p>
<pre><code>cnpm install -g @angular/cli
</code></pre>
<p>然后就是老步骤，下载node_modules 依赖包</p>
<pre><code>cnpm install
</code></pre>
<p>之后直接 ng serve 启动命令有点别具一格的简洁，直接芜湖🛫️</p>
<pre><code>ng serve
</code></pre>
<p>接下来，就是见证 奇迹（打脸）的时刻<br>
<img src="https://qinyu312.github.io/post-images/1606213638697.png" alt="" loading="lazy"><br>
我敲完命令一回车，啪的一下满屏飙红报错，很快啊，我就看到是依赖包的问题，按照传统功夫的看到为止，我没有看下去，上去就是一个卸载依赖，一个 cnpm install ，我大意了啊，没有删完，接着又是飙红报错。Angular 不讲武德，来欺，为难我入行一年多点的小前端，希望它以后耗子尾汁！<br>
<img src="https://qinyu312.github.io/post-images/1606228631691.png" alt="" loading="lazy"><br>
最后在 node_modules 下的 less-loader 加上一句  javascriptEnabled: true  ，问题得到解决<br>
<img src="https://qinyu312.github.io/post-images/1606228810583.png" alt="" loading="lazy"></p>
<p>项目成功启动，再来解决兼容IE8的问题，<a href="https://angular.cn/guide/browser-support">Angular</a>，官方文档浏览器兼容部分我们可以看到， IE 10, 11, 9，也就是说连官方都放弃去做IE9一下的兼容了。<br>
<img src="https://qinyu312.github.io/post-images/1606461891938.png" alt="" loading="lazy"><br>
忍不住又想吐槽IE一把，但是客户需求在身，只能硬着头皮做了，因为Angular在国内市场的使用还不是特别频繁，所以我在百度没有什么收获之后，决定翻墙去 Google ，Angular 也不亏是 Google的亲儿子。方案当然是有的。需要将Angular版本降低至 1.2一以下可以对IE8进行兼容适配。然后就是传统功夫的卸载新版本，安装旧版本。</p>
<pre><code>&lt;!-- 卸载新版本 --&gt;
cnpm uninstall -g @angular/cli
&lt;!-- 安装新版本 --&gt;
cnpm install -g @angular/cli/1.1
</code></pre>
<p>问题得到解决，兼容是好了，样式又乱的简直是乱他妈妈给乱开门  -  乱到家了。不说了，我要去调样式了！<br>
<img src="https://qinyu312.github.io/post-images/1606462146562.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue-router 路由守卫]]></title>
        <id>https://qinyu312.github.io/post/vue-router-lu-you-shou-wei/</id>
        <link href="https://qinyu312.github.io/post/vue-router-lu-you-shou-wei/">
        </link>
        <updated>2020-11-23T01:59:18.000Z</updated>
        <content type="html"><![CDATA[<pre><code>有一段时间没有写过 vue 的项目了，最近工作中需要自己搭建，所以简单分享一下vue-router路由守卫!
</code></pre>
<p>项目中很常见的一种场景，需求是，用户打开网址进入线上地址，首先是登录页面，用户需要账号密码验证码等手段通过验证和赋权，才可以进入到包括首页，各种管理等内容页面，未登录之前，通过修改路由来进行跳转，如果确实存在此路由，会跳转到登录页面进行登录，如果没有这个路由，会跳转到 404 页面。而成功完成登录后再进行路由地址修改则可以正常跳转！<br>
这里就需要用到通配符匹配和 路由守卫等操作了</p>
<h2 id="通配符">通配符 *</h2>
<p>一般用于菜单路由匹配的最后面，为什么要放在最后面呢？因为放在前面会把写在它之后的路由菜单全部匹配进去，就相当于在小河的上游筑起水坝蓄水，那下游自然就没水了，所以通配符相当于确保没有漏网之鱼的作用，凡是没有被定义的路由，都会被它拦截，转而跳转到首页或者404等页面。</p>
<pre><code>&lt;!-- router 下的 index.js --&gt;
export default new Router({
  routes: [
    {
      path:'/home',
      name:'home',
      component:home
    },
    //通配符的使用
    {
      path: '/detail-*',
      component:detail
    },
    {
      path: '/*',
      component:notFound
    }
  ]
})
</code></pre>
<h2 id="beforeeach-前置路由守卫">beforeEach() 前置路由守卫</h2>
<p>当你随意修改路由地址上的路由菜单进行跳转，比如在 '/login' 修改为 '/home'却可以正常跳转时，在尚未登录赋权的情况下就可以进入程序主页面，是一种很不安全的操作，就需要用到路由守卫了！全局前置路由守卫用于路由跳转之前执行，他有三个参数 'to' 参数，表示你当前正要跳转到哪里去，也就是目标页面路由， 'from'参数表示，从哪里来的，也就是当前页面， next() 方法，一定需要调用，继续往下执行的函数。</p>
<pre><code>&lt;!-- 在 roter 文件下的路由配置处， 将meta下的 requireAuth 设置为 true作为此菜单不可不登录直接跳转的标记 --&gt;
{
    path: '/home',
    meta:{ requireAuth: true }
}
</code></pre>
<pre><code>&lt;!-- main.js --&gt;
beforeEach((to, form, next) =&gt; {
    console.log(to)
    console.log(from)
    &lt;!-- 如果要去的这个页面的路由配置中 meta.requireAuth 为 true的话 --&gt;
    if(to.meta.requireAuth) {
        &lt;!-- 判断本地存储是否有token令牌，如果有并且令牌合法，调用 next() 方法继续执行 --&gt;
        if(localStorage.getItem('access_token')) {
            next();
        } else {
            &lt;!-- 否则就直接调用next()方法跳转回登录页面重新登录 --&gt;
            next({
                path: '/login'
            })
        }
    } else {
        next();
    }
})
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://qinyu312.github.io/post-images/1606098979481.png" alt="" loading="lazy"></figure>
<p>设置完成之后保存并运行项目就会发现，在路径处修改路由不会直接跳转而是会自动拦截。</p>
]]></content>
    </entry>
</feed>